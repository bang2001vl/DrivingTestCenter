datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL_WITH_SCHEMA")
}

generator client {
    provider = "prisma-client-js"
}

//
// Account system
//
model Account {
    id     Int @id @default(autoincrement())

    username String @db.VarChar(256)
    password String @db.VarChar(256)
    // 0 is admin, 1 is student, 2 is employee (teacher)
    roleId Int @default(1)
    status   Int    @default(0)

    fullname  String   @db.VarChar(255)
    birthday  DateTime
    gender    Int
    email   String @db.VarChar(256)
    phoneNumber String  @db.VarChar(20)
    address   String   @db.VarChar(1000)
    avatarURI String?  @db.VarChar(256)

    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    session  Session[]

    @@index([username, password])
    @@map("account")
}

model Session {
    id        Int @id @default(autoincrement())
    accountId  Int

    token       String @unique(map: "token") @db.VarChar(50)
    deviceInfo  String @db.VarChar(5000)
    // 0 is admin, 1 is student, 2 is employee (teacher)
    roleId Int @default(1)

    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    account Account @relation(fields: [accountId], references: [id])

    @@index([accountId])
    @@map("session")
}

//
// Data system
//
model Exam {
    id Int @id @default(autoincrement())

    name      String   @db.VarChar(255)
    type      String   @db.VarChar(255)
    dateStart DateTime
    dateEnd   DateTime
    dateOpen  DateTime
    dateClose DateTime
    maxMember Int
    rules     String   @db.VarChar(3000)
    price     Int

    countStudent Int      @default(0)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    examTests ExamTest[]
    @@map("exam")
}

model ExamTest {
    id     Int  @id @default(autoincrement())
    examId Int

    name          String   @db.VarChar(255)
    location      String   @db.VarChar(255)
    dateTimeStart DateTime
    dateTimeEnd   DateTime
    maxMember     Int

    countStudent Int      @default(0)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    exam         Exam?                    @relation(fields: [examId], references: [id])
    studentCNNs  CONN_Student_ExamTest[]
    employeeCNNs CONN_Employee_ExamTest[]
    @@map("examtest")
}

model Class {
    id     Int  @id @default(autoincrement())

    name      String   @db.VarChar(255)
    location  String   @db.VarChar(255)
    dateStart DateTime
    dateEnd   DateTime
    maxMember Int
    price     Int
    rules     String   @db.VarChar(3000) @default("")

    countStudent Int      @default(0)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    schedules    ClassSchedule[]
    studentCNNs  CONN_Student_Class[]
    employeeCNNs CONN_Employee_Class[]
    @@map("class")
}

model ClassSchedule {
    id      Int  @id @default(autoincrement())
    classId Int?

    location  String   @db.VarChar(255)
    dateStart DateTime
    dateEnd   DateTime
    notes     String?   @db.VarChar(3000)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    classes Class? @relation(fields: [classId], references: [id])
    @@map("classschedule")
}

model Student {
    id        Int @id @default(autoincrement())
    accountId  Int 

    //account      Account                 @relation(fields: [accountId], references: [id])
    classCNNs    CONN_Student_Class[]
    examTestCNNs CONN_Student_ExamTest[]
    @@map("student")
}

model Employee {
    id        Int @id @default(autoincrement())
    accountId Int 

    //account      Account                  @relation(fields: [accountId], references: [id])
    classCNNs    CONN_Employee_Class[]
    examTestCNNs CONN_Employee_ExamTest[]
    @@map("employee")
}

model Bill {
    id        Int  @id @default(autoincrement())
    studentId Int?
    classId  Int?
    testId Int?

    totalPrice Int
    reason     String @db.VarChar(255) @default("")
    notes String @db.VarChar(3000) @default("")
    status     Int    @default(0)

    beginAt DateTime @default(now())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // depositorStudent Student?     @relation(fields: [depositorId], references: [id])
    // recipientClass Class?     @relation(fields: [recipientId], references: [id], map: "fk_bill_class")
    // recipientExamTest ExamTest?     @relation(fields: [recipientId], references: [id], map: "fk_bill_examtest")
    @@map("payment")
}

model CONN_Student_ExamTest {
    id           Int @id @default(autoincrement())
    studentId    Int
    examTestId   Int
    billDetailId Int @unique

    examTest   ExamTest   @relation(fields: [examTestId], references: [id])
    student    Student    @relation(fields: [studentId], references: [id])
    @@map("conn_student_examtest")
}

model CONN_Student_Class {
    id           Int @id @default(autoincrement())
    studentId    Int
    classId      Int
    billDetailId Int @unique

    student    Student    @relation(fields: [studentId], references: [id])
    class      Class      @relation(fields: [classId], references: [id])
    @@map("conn_student_class")
}

model CONN_Employee_ExamTest {
    id         Int @id @default(autoincrement())
    employeeId Int
    examTestId Int

    employee Employee @relation(fields: [employeeId], references: [id])
    examTest ExamTest @relation(fields: [examTestId], references: [id])
    @@map("conn_employee_examtest")
}

model CONN_Employee_Class {
    id         Int @id @default(autoincrement())
    employeeId Int
    classId    Int

    employee Employee @relation(fields: [employeeId], references: [id])
    class    Class    @relation(fields: [classId], references: [id])
    @@map("conn_employee_class")
}

model RevenueReportDaily {
    id      Int  @id @default(autoincrement())
    year Int
    month   Int
    day  Int

    totalRevenue  BigInt   @default(0)

    @@map("revenue_report_daily")
}