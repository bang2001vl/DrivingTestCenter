datasource db {
    //url      = "mysql://sa:HackDuocThi%21%40%23NhatBanRoi%24%25%5E@localhost:3306/doan2"
    url      = "mysql://remote:Ak47manhvler@thunderv.southeastasia.cloudapp.azure.com:3306/doan2"
    provider = "mysql"
}

generator client {
    provider = "prisma-client-js"
}

//
// Account system
//
model Account {
    id        Int      @id @default(autoincrement())
    roleId  Int   

    username  String   @db.VarChar(256)
    password  String   @db.VarChar(256)
    status    Int      @default(0)

    createdAt DateTime @db.DateTime(0) @default(now())
    updatedAt DateTime @db.DateTime(0) @default(now()) 

    session   Session[]
    employee Employee?
    student Student?

    @@index([username, password])
}
model Session {
    id         Int      @id @default(autoincrement())
    accountId  Int

    token      String   @unique(map: "token") @db.VarChar(50)
    deviceInfo String   @db.VarChar(5000)
    sessionData String @db.VarChar(5000)

    createdAt  DateTime @db.DateTime(0) @default(now())
    updatedAt  DateTime @db.DateTime(0) @default(now())

    account    Account @relation(fields: [accountId], references: [id], map: "session_ibfk_1")

    @@index([accountId])
}
model CONST_ROLE {
    id         Int      @id @default(autoincrement())
    name      String   @db.VarChar(255)
}

//
// Data system
//
model Exam {
    id Int @id @default(autoincrement())

    name      String   @db.VarChar(255)
    type      String   @db.VarChar(255)
    dateStart DateTime
    maxMember Int
    rules     String   @db.VarChar(3000)
    price     Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    examTests ExamTest[]
    classes   Class[]
}

model ExamTest {
    id     Int  @id @default(autoincrement())
    examId Int?

    name          String   @db.VarChar(255)
    location      String   @db.VarChar(255)
    dateTimeStart DateTime
    maxMember     Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    exam Exam? @relation(fields: [examId], references: [id])
    studentCNNs CONN_Student_ExamTest[]
    employeeCNNs CONN_Employee_ExamTest[]
}

model Class {
    id     Int  @id @default(autoincrement())
    examId Int?

    name      String   @db.VarChar(255)
    location  String   @db.VarChar(255)
    dateStart DateTime
    maxMember Int
    rules     String   @db.VarChar(3000)
    price     Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    exam Exam? @relation(fields: [examId], references: [id])
    studentCNNs CONN_Student_Class[]
    employeeCNNs CONN_Employee_Class[]
}

model Student {
    id Int @id @default(autoincrement())
    accountId Int

    fullname String   @db.VarChar(255)
    birthday DateTime
    gender   Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    account Account @relation(fields: [accountId], references: [id])
    payments Payment[]
    classCNNs CONN_Student_Class[]
    examTestCNNs CONN_Student_ExamTest[]
}

model Employee {
    id Int @id @default(autoincrement())
    accountId Int

    fullname String   @db.VarChar(255)
    birthday DateTime
    gender   Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    account Account @relation(fields: [accountId], references: [id])
    classCNNs CONN_Employee_Class[]
    examTestCNNs CONN_Employee_ExamTest[]
}

model Payment {
    id Int @id @default(autoincrement())
    studentId Int?

    totalPrice Int
    reason String @db.VarChar(255)
    status Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    student Student? @relation(fields: [studentId], references: [id])
    details BillDetail[]
}

model BillDetail {
    id Int @id @default(autoincrement())
    paymentId Int?

    price Int @default(0)
    reason String @db.VarChar(255)

    payment Payment? @relation(fields: [paymentId], references: [id])
    classCNN CONN_Student_Class?
    examTestCNN CONN_Student_ExamTest?
}

model CONN_Student_ExamTest {
    id Int @id @default(autoincrement())
    studentId Int
    examTestId Int
    billDetailId Int

    billDetail BillDetail @relation(fields: [billDetailId], references: [id])
    examTest ExamTest @relation(fields: [examTestId], references: [id])
    student Student @relation(fields: [studentId], references: [id])
}

model CONN_Student_Class {
    id Int @id @default(autoincrement())
    studentId Int
    classId Int
    billDetailId Int

    billDetail BillDetail @relation(fields: [billDetailId], references: [id])
    student Student @relation(fields: [studentId], references: [id])
    class Class @relation(fields: [classId], references: [id])
}

model CONN_Employee_ExamTest {
    id Int @id @default(autoincrement())
    employeeId Int
    examTestId Int

    employee Employee @relation(fields: [employeeId], references: [id])
    examTest ExamTest @relation(fields: [examTestId], references: [id])
}

model CONN_Employee_Class {
    id Int @id @default(autoincrement())
    employeeId Int
    classId Int

    employee Employee @relation(fields: [employeeId], references: [id])
    class Class @relation(fields: [classId], references: [id])
}

// Khi Student đăng kí 1 khóa học thì
//      + Tạo 1 BillDetail 
//      + Tạo 1 Connection gắn với khóa học và student
//      + Liên kết BillDetail với Connection qua connection.billDetailId
// Khi Student thanh toán n BillDetail thì
//      + Tạo 1 Payment đại diện cho lần thanh toán
//      + Nếu thành công thì Liên kết BillDetail với Payment qua BillDetail.paymentId
//      + Nếu chưa thành công thì vẫn để BillDetail.paymentId = null

// Xem danh sách hóa đơn của student:
//      + Lấy các BillDetail CNN_Student_*** bằng studentId
//      + Nếu chưa thanh toán thì BillDetail.payment = null
//      + Lấy trạng thái thanh toán qua BillDetail.payment.status